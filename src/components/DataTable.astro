---
const { data } = Astro.props; // Data from Google Sheets
console.log(data);
---

<div class="overflow-x-auto">
	<table class="table w-full">
		<thead>
			<tr>
				<th class="p-2">Date</th>
				<th class="p-2">Opponent</th>
				<th class="p-2">Score</th>
				<th class="p-2">Winner</th>
				<th class="p-2">Social Media Links</th>
			</tr>
		</thead>
		<tbody>
			{
				data.map((row) => (
					<tr class="hover player-row" data-player={row[3]}>
						{/* Winner is in row[3] */}
						<td class="p-2">{row[0]}</td> {/* Date */}
						<td class="p-2">{row[1]}</td> {/* Opponent */}
						<td class="p-2">{row[2]}</td> {/* Score */}
						<td class="p-2">
							<div class="flex items-center">
								<img
									class="profile-img w-16 h-16 rounded-full"
									alt="Loading..."
								/>
								{row[3]}
							</div>
						</td>
						{/* Winner */}
						<td class="p-2">
							{row[4] && (
								<a href={row[4]} target="_blank" class="mr-2">
									Instagram
								</a>
							)}
							{row[5] && (
								<a href={row[5]} target="_blank">
									Twitter
								</a>
							)}
						</td>
					</tr>
				))
			}
		</tbody>
	</table>
</div>

<script>
	document.addEventListener('DOMContentLoaded', loadPlayerImages);

	async function loadPlayerImages() {
		const roster = await fetchNHLRoster(); // Fetch Rangers Roster

		const tableRows = document.querySelectorAll('.player-row'); // Get all rows with players
		for (const row of tableRows) {
			const playerLastName = row.getAttribute('data-player')?.trim(); // Get last name from Google Sheet
			const imgElement = row.querySelector('.profile-img') as HTMLImageElement; // Cast to HTMLImageElement

			if (playerLastName && imgElement) {
				const playerData = roster.find(
					(p) =>
						p.lastName.default.toLowerCase() === playerLastName.toLowerCase()
				);
				if (playerData) {
					imgElement.src = playerData.headshot; // Use headshot URL from roster data
					imgElement.alt = playerLastName; // Set alt text to the player's last name
				} else {
					imgElement.alt = 'No Image'; // No matching player found
				}
			}
		}
	}

	async function fetchNHLRoster() {
		try {
			const response = await fetch('/.netlify/functions/fetchNHLRoster');
			const data = await response.json();
			return [...data.forwards, ...data.defensemen, ...data.goalies]; // Combine forwards, defensemen, and goalies
		} catch (error) {
			console.error('Error fetching Rangers roster:', error);
			return [];
		}
	}
</script>
